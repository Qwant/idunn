# based on model generated by datamodel-codegen:
#   filename:  spec.yaml
#   timestamp: 2020-11-26t07:58:40+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field


class Model(BaseModel):
    __root__: Any


class BusinessDescription(BaseModel):
    label: Optional[str] = Field(None, description="Business description label")
    values: Optional[List[str]] = Field(None, description="Array of Business description values")


class BusinessWebsite(BaseModel):
    url: Optional[str] = Field(None, description="URL of business website")
    photos_thumbnail_url: Optional[str] = Field(
        None, description="URL of business website “Photos” section thumbnail"
    )
    photos_url: Optional[str] = Field(None, description="URL of business website “Photos” section")
    videos_thumbnail_url: Optional[str] = Field(
        None, description="URL of business website “Videos” section thumbnail"
    )
    videos_url: Optional[str] = Field(None, description="URL of business website Videos section")


class Category(BaseModel):
    category_name: Optional[str] = Field(None, description="Category name")


class ConsultationFees(BaseModel):
    base_price: Optional[str] = Field(None, description="Base price")
    min_price: Optional[str] = Field(None, description="Minimum price")
    max_price: Optional[str] = Field(None, description="Maximum price")


class ContactType(Enum):
    TELEPHONE = "TELEPHONE"
    TELEPHONE_FAX = "TELEPHONE_FAX"
    FAX = "FAX"
    TELEX = "TELEX"
    MAIL = "MAIL"
    AUTRE = "AUTRE"
    MOBILE = "MOBILE"


class PhoneNumberPricingType(Enum):
    Gratuit = "Gratuit"
    Banalisé = "Banalisé"
    Majoré = "Majoré"


class ContactInfo(BaseModel):
    contact_type: Optional[ContactType] = Field(None, description="Type of contact information")
    contact_value: Optional[str] = Field(
        None, description="Contact information: Phone number (not formatted), Email..."
    )
    phone_number_pricing: Optional[str] = Field(None, description="Phone number pricing")
    phone_number_pricing_type: Optional[PhoneNumberPricingType] = Field(
        None, description="Type of phone number pricing"
    )
    phone_number_details: Optional[str] = Field(None, description="Details of phone number")
    no_direct_marketing: Optional[bool] = Field(
        None, description="No direct marketing allowed for this business"
    )


class LegalNotice(BaseModel):
    label: Optional[str] = Field(None, description="Legal notice label")
    content: Optional[str] = Field(None, description="Legal notice content")


class CurrentStatus(Enum):
    OPEN = "OPEN"
    CLOSED = "CLOSED"


class Pages(BaseModel):
    current_page: Optional[int] = Field(None, description="Current page")
    page_count: Optional[int] = Field(None, description="Total number of pages")
    listings_per_page: Optional[int] = Field(None, description="Listings per page")
    prev_page_url: Optional[str] = Field(None, description="URL to the previous page")
    current_page_url: Optional[str] = Field(None, description="URL to the current page")
    next_page_url: Optional[str] = Field(None, description="URL to the next page")


class PracticalInformations(BaseModel):
    is_health_insurance_card_accepted: Optional[bool] = Field(
        None, description="Indicates if health insurance card is accepted"
    )


class Results(BaseModel):
    first_listing: Optional[int] = Field(None, description="First listing index")
    last_listing: Optional[int] = Field(None, description="Last listing index")
    total_listing: Optional[int] = Field(None, description="Total number of listings")
    total_local_listing: Optional[int] = Field(
        None,
        description="Total number of local listings. If argument proximity is true, this attribute is not available",
    )


class Reviews(BaseModel):
    total_reviews: Optional[int] = Field(
        None, description="Number of reviews that have been written for this listing"
    )
    overall_review_rating: Optional[float] = Field(
        None, description="Overall rating for the review"
    )


class FilterEnum(Enum):
    ECO = "ECO"
    WEB_REVIEW = "WEB_REVIEW"
    PRIVATE_ADVERTIZERS = "PRIVATE_ADVERTIZERS"
    PRIVATE_OOREKA_PUSH = "PRIVATE_OOREKA_PUSH"
    PRIVATE_OOREKA_LR = "PRIVATE_OOREKA_LR"
    ECO_RESPONSABILITE = "ECO_RESPONSABILITE"
    PAS_DE_LEURRE = "PAS_DE_LEURRE"
    SANS_BOOSTER_GARANTI = "SANS_BOOSTER_GARANTI"
    B2B = "B2B"


class Search(BaseModel):
    what: Optional[str] = Field(None, description="Search term text used in query")
    where: Optional[str] = Field(None, description="The geographic location used in query")
    latitude: Optional[float] = Field(
        None, description="Latitude used in query (only if coordinates used in query)"
    )
    longitude: Optional[float] = Field(
        None, description="Longitude used in query (only if coordinates used in query)"
    )
    proximity: Optional[bool] = Field(None, description="Proximity flag enabled in query")
    sort: Optional[str] = Field(None, description="Sorting value set in query, if any")
    filter: Optional[List[FilterEnum]] = Field(
        None, description="Filtering value set in query, if any"
    )
    request_id: Optional[str] = Field(None, description="Request id (for stats purposes)")


class Type(Enum):
    RESERVER = "RESERVER"
    RESERVER_INTERNE = "RESERVER_INTERNE"
    COMMANDER = "COMMANDER"
    COMMANDER_CHRONO = "COMMANDER_CHRONO"
    PRENDRE_RDV_EXTERNE = "PRENDRE_RDV_EXTERNE"
    PRENDRE_RDV_INTERNE = "PRENDRE_RDV_INTERNE"


class TransactionalLink(BaseModel):
    type: Optional[Type] = Field(None, description="Type of transactional link")
    url: Optional[str] = Field(None, description="URL of the transactional link")
    next_free_slot: Optional[str] = Field(None, description="Next free slot for an appointment")


class Urls(BaseModel):
    merchant_url: Optional[str] = Field(
        None, description="Link to the merchant page on PagesJaunes.fr"
    )
    reviews_url: Optional[str] = Field(
        None, description="Link to the business reviews on PagesJaunes.fr"
    )
    map_url: Optional[str] = Field(None, description="Link to the map URL on PagesJaunes.fr")
    immersive_url: Optional[str] = Field(
        None, description="<b>Deprecated:</b> Link to the immersive view on PagesJaunes.fr"
    )
    itinerary_url: Optional[str] = Field(
        None, description="Link to the detailed route to that place.fr"
    )


class Type1(Enum):
    VIGNETTE_PRO = "VIGNETTE_PRO"
    PVI = "PVI"
    VIGNETTE_VIDEO_PVI = "VIGNETTE_VIDEO_PVI"
    VIGNETTE_VIDEO_STANDALONE = "VIGNETTE_VIDEO_STANDALONE"
    UGC = "UGC"
    AGC = "AGC"
    PGC = "PGC"
    PARTENAIRE_HOTEL = "PARTENAIRE_HOTEL"
    DOSD = "DOSD"
    LAFOURCHETTE = "LAFOURCHETTE"
    PUDLOWSKI = "PUDLOWSKI"
    MILLE_UN_MENUS = "MILLE_UN_MENUS"
    FIGAROSCOPE = "FIGAROSCOPE"
    LEADFORMANCE = "LEADFORMANCE"
    CVIV_PHOTO = "CVIV_PHOTO"
    CVIV_LOGO = "CVIV_LOGO"
    PARTENAIRE_PJDOC = "PARTENAIRE_PJDOC"
    DOSD_WIKIMEDIA = "DOSD_WIKIMEDIA"


class VisualLink(BaseModel):
    type: Optional[Type1] = Field(None, description="Type of visual")
    url: Optional[str] = Field(None, description="URL of the visual")


class WebsiteUrls(BaseModel):
    website_url: Optional[str] = Field(None, description="URL of merchant website")


class StatusContent(BaseModel):
    code: Optional[str] = None
    message: Optional[str] = None


class Context(BaseModel):
    search: Optional[Search] = Field(None, description="Search parameter context object")
    results: Optional[Results] = Field(None, description="Results listing summary object")
    pages: Optional[Pages] = Field(None, description="Paging context object")


class Healthcare(BaseModel):
    government_regulation_type: Optional[str] = Field(
        None, description="Government regulation type "
    )
    consultation_fees: Optional[ConsultationFees] = Field(None, description="Consultion fees")
    access_to_care_contract: Optional[bool] = Field(
        None,
        description="Access to Care Contract concluded between health insurance providers and doctors practising in sector",
    )
    practical_informations: Optional[PracticalInformations] = Field(
        None, description="Practical informations"
    )


class Inscription(BaseModel):
    inscription_id: Optional[int] = Field(None, description="Id of one business subscription")
    pro_id: Optional[str] = Field(None, description="Id of the professional site")
    label: Optional[str] = Field(None, description="Name of one business subscription")
    adress_street: Optional[str] = Field(
        None, description="<b>Deprecated:</b> Number and street of business location"
    )
    adress_zipcode: Optional[str] = Field(
        None, description="<b>Deprecated:</b> Zip code of business location"
    )
    adress_city: Optional[str] = Field(
        None, description="<b>Deprecated:</b> City of business location"
    )
    address_street: Optional[str] = Field(
        None, description="Number and street of business location"
    )
    address_zipcode: Optional[str] = Field(None, description="Zip code of business location")
    address_city: Optional[str] = Field(None, description="City of business location")
    latitude: Optional[float] = Field(None, description="Location latitude (WGS84)")
    longitude: Optional[float] = Field(None, description="Location longitude (WGS84)")
    distance: Optional[float] = Field(
        None, description="Distance from center (in m), in case of proximity search"
    )
    reviews: Optional[Reviews] = Field(None, description="Reviews object")
    contact_info: Optional[List[ContactInfo]] = Field(
        None, description="Array of contact information"
    )
    urls: Optional[Urls] = Field(None, description="Wraps the set of urls for this business")


class Listing(BaseModel):
    listing_id: Optional[str] = Field(None, description="Listing id")
    position: Optional[int] = Field(None, description="Listing position (for stats purpose)")
    merchant_id: Optional[str] = Field(
        None, description="The merchant id, identifying the business"
    )
    merchant_name: Optional[str] = Field(None, description="Name of the merchant")
    thumbnail_url: Optional[str] = Field(None, description="URL for the merchant main thumbnail")
    visuel_url: Optional[List[VisualLink]] = Field(None, description="List of visuels URL")
    description: Optional[str] = Field(None, description="<b>Deprecated:</b> Descriptive text")
    website_urls: Optional[List[WebsiteUrls]] = Field(
        None, description="Array of merchant websites URLs"
    )
    business_descriptions: Optional[List[BusinessDescription]] = Field(
        None, description="Array of business description object"
    )
    business_website: Optional[BusinessWebsite] = Field(
        None, description="Array of business website object"
    )
    eco_label: Optional[bool] = Field(None, description="Eco-responsibility label")
    legal_notice: Optional[List[LegalNotice]] = Field(None, description="Array of legal notices")
    categories: Optional[List[Category]] = Field(None, description="Array of categories")
    inscriptions: Optional[List[Inscription]] = Field(
        None, description="Array of all subscriptions (contact info and address) for a business"
    )
    transactionals_links: Optional[List[TransactionalLink]] = Field(
        None, description="Array of transactionals links"
    )
    current_status: Optional[CurrentStatus] = Field(
        None, description="<b>Deprecated:</b> Type current status"
    )
    opening_hours: Optional[str] = Field(
        None,
        description=" Opening hours (see http://wiki.openstreetmap.org/wiki/Key:opening_hours/specification to calculate current status)",
    )
    healthcare: Optional[Healthcare] = Field(None, description="Healthcare informations")
    services: Optional[List[str]] = Field(None, description="Services")
    certifications: Optional[List[str]] = Field(None, description="Certifications")


class SearchResults(BaseModel):
    search_url: Optional[str] = Field(
        None,
        description="URL to the search results on PagesJaunes.fr (only if coordinates not used in query)",
    )
    small_map_url: Optional[str] = Field(None, description="URL for small map image")
    listings: Optional[List[Listing]] = Field(None, description="Array of listings")


class Status(BaseModel):
    status_content: Optional[List[StatusContent]] = None


class Response(BaseModel):
    context: Optional[Context] = Field(
        None, description="Object containing the context data for this query"
    )
    search_results: Optional[SearchResults] = Field(
        None, description="Object containing the search result for this query"
    )


class Exception(BaseModel):
    status: Optional[Status] = None
    class_: Optional[str] = Field(None, alias="class")
    stack: Optional[str] = None
