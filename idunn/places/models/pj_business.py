# generated by datamodel-codegen:
#   filename:  spec.yaml
#   timestamp: 2020-11-25T16:21:15+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field


class Model(BaseModel):
    __root__: Any


class Type(Enum):
    HOTEL = "HOTEL"
    COTTAGE = "COTTAGE"
    B_AND_B = "B_AND_B"
    CAMPING = "CAMPING"


class AccommodationInfo(BaseModel):
    type: Optional[Type] = Field(None, description="Type of accommodation information")
    category: Optional[str] = Field(None, description="Categorie of the accommodation information")
    rate_base: Optional[str] = Field(None, description="Rate base of the accommodation information")


class BusinessDescription(BaseModel):
    label: Optional[str] = Field(None, description="Business description label")
    values: Optional[List[str]] = Field(None, description="Array of Business description values")


class BusinessDetails(BaseModel):
    siret: Optional[str] = Field(None, description="Siret number")
    naf_code: Optional[str] = Field(None, description="NAF code")
    number_of_employees: Optional[str] = Field(None, description="Number of employees")
    head_office: Optional[bool] = Field(None, description="Indicates if it's the head office")


class BusinessWebsite(BaseModel):
    summary: Optional[str] = Field(None, description="Summary of the business website object")
    url: Optional[str] = Field(None, description="URL of business website")
    photos_url: Optional[List[str]] = Field(
        None, description="Array of photos of business website object"
    )
    videos_url: Optional[List[str]] = Field(
        None, description="Array of videos of business website object"
    )


class Category(BaseModel):
    category_name: Optional[str] = Field(None, description="Category name")


class ClosingPeriod(BaseModel):
    start_date: Optional[str] = Field(None, description="Start date of the period")
    end_date: Optional[str] = Field(None, description="End date of the period")


class Type1(Enum):
    ECONOMIE_ENERGIE = "ECONOMIE_ENERGIE"
    ECO_PRODUIT = "ECO_PRODUIT"
    GESTION_DECHETS = "GESTION_DECHETS"
    RESPONSABILITE_SOCIETALE = "RESPONSABILITE_SOCIETALE"


class Commitment(BaseModel):
    title: Optional[str] = Field(None, description="Title of commitment")
    content: Optional[str] = Field(None, description="Content of commitment")
    type: Optional[Type1] = Field(None, description="Type of commitment")


class ConsultationFees(BaseModel):
    base_price: Optional[str] = Field(None, description="Base price")
    min_price: Optional[str] = Field(None, description="Minimum price")
    max_price: Optional[str] = Field(None, description="Maximum price")


class ContactType(Enum):
    MOBILE = "MOBILE"
    TELEPHONE = "TELEPHONE"
    TELEPHONE_FAX = "TELEPHONE_FAX"
    FAX = "FAX"
    TELEX = "TELEX"
    MAIL = "MAIL"
    MINITEL = "MINITEL"
    AUTRE = "AUTRE"


class PhoneNumberPricingType(Enum):
    Gratuit = "Gratuit"
    Banalisé = "Banalisé"
    Majoré = "Majoré"


class ContactInfo(BaseModel):
    contact_type: Optional[ContactType] = Field(None, description="Type of contact information")
    contact_value: Optional[str] = Field(
        None, description="Contact information: Phone number (not formatted), Email..."
    )
    phone_number_pricing: Optional[str] = Field(None, description="Phone number pricing")
    phone_number_pricing_type: Optional[PhoneNumberPricingType] = Field(
        None, description="Type of phone number pricing"
    )
    phone_number_details: Optional[str] = Field(None, description="Details of phone number")
    no_direct_marketing: Optional[bool] = Field(
        None, description="No direct marketing allowed for this business"
    )


class Distance(BaseModel):
    type: Optional[str] = Field(None, description="Type")
    value: Optional[int] = Field(None, description="Value")
    unit: Optional[str] = Field(None, description="Unit")


class ExceptionalClosingDay(BaseModel):
    day: Optional[str] = Field(None, description="Day")
    start_closing_time: Optional[str] = Field(None, description="Start closing time")
    end_closing_time: Optional[str] = Field(None, description="End closing time")


class ExceptionalOpeningDay(BaseModel):
    day: Optional[str] = Field(None, description="Day")
    morning_opening_time: Optional[str] = Field(None, description="Opening time of the morning")
    morning_closing_time: Optional[str] = Field(None, description="Closing time of the morning")
    afternoon_opening_time: Optional[str] = Field(None, description="Opening time of the afternoon")
    afternoon_closing_time: Optional[str] = Field(None, description="Closing time of the afternoon")


class HeadOfficeAddress(BaseModel):
    address_building: Optional[str] = Field(None, description="Building of head office location")
    address_street_number: Optional[str] = Field(None, description="Number of head office location")
    address_street: Optional[str] = Field(None, description="Street of head office location")
    address_zipcode: Optional[str] = Field(None, description="Zip code of head office location")
    address_city: Optional[str] = Field(None, description="City of head office location")
    address_district: Optional[str] = Field(None, description="District of head office location")
    address_postal_box: Optional[str] = Field(
        None, description="Postal box of head office location"
    )
    address_country: Optional[str] = Field(None, description="Country box of head office location")


class KeyFigures(BaseModel):
    revision_date: Optional[str] = Field(None, description="Revision date")
    turnover: Optional[str] = Field(None, description="Turnover")
    gross_operating_surplus: Optional[str] = Field(None, description="Gross operating surplus")
    net_income: Optional[str] = Field(None, description="Net income")


class Label(BaseModel):
    title: Optional[str] = Field(None, description="Title of label")
    description: Optional[str] = Field(None, description="Description of label")
    logo_url: Optional[str] = Field(None, description="Logo of the label")
    website_url: Optional[str] = Field(None, description="URL of official website")


class LegalNotice(BaseModel):
    label: Optional[str] = Field(None, description="Legal notice label")
    content: Optional[str] = Field(None, description="Legal notice content")


class MainOfficer(BaseModel):
    name: Optional[str] = Field(None, description="Name")
    position: Optional[str] = Field(None, description="Position")


class OpeningDay(BaseModel):
    weekday: Optional[str] = Field(None, description="Day of the week")
    morning_opening_time: Optional[str] = Field(None, description="Opening time of the morning")
    morning_closing_time: Optional[str] = Field(None, description="Closing time of the morning")
    afternoon_opening_time: Optional[str] = Field(None, description="Opening time of the afternoon")
    afternoon_closing_time: Optional[str] = Field(None, description="Closing time of the afternoon")


class PaymentType(BaseModel):
    label: Optional[str] = Field(None, description="Label")
    description: Optional[str] = Field(None, description="Description")


class Photo(BaseModel):
    description: Optional[str] = Field(None, description="The photo description")
    url: Optional[str] = Field(None, description="URL of the photo")


class PracticalInformations(BaseModel):
    is_health_insurance_card_accepted: Optional[bool] = Field(
        None, description="Notice if the health insurance card is accepted"
    )


class Product(BaseModel):
    product_type: Optional[str] = Field(None, description="Product type")
    product_subtype: Optional[str] = Field(None, description="Product subtype")


class CurrentStatus(Enum):
    OPEN = "OPEN"
    CLOSED = "CLOSED"


class RestaurantInfo(BaseModel):
    cooking_types: Optional[List[str]] = Field(None, description="Cooking types")
    atmospheres: Optional[List[str]] = Field(None, description="Atmospheres")
    cooking_convictions: Optional[List[str]] = Field(None, description="Cooking convictions")


class Results(BaseModel):
    message: Optional[str] = Field(None, description="Message")


class Reviews(BaseModel):
    total_reviews: Optional[int] = Field(
        None, description="Number of reviews that have been written for this listing"
    )
    overall_review_rating: Optional[float] = Field(
        None, description="Overall rating for the review"
    )


class Schedules(BaseModel):
    opening_days: Optional[List[OpeningDay]] = Field(None, description="Array of opening days")
    closing_periods: Optional[List[ClosingPeriod]] = Field(
        None, description="Array of closing periods"
    )
    exceptional_opening_days: Optional[List[ExceptionalOpeningDay]] = Field(
        None, description="Array of exceptional opening days"
    )
    exceptional_closing_days: Optional[List[ExceptionalClosingDay]] = Field(
        None, description="Array of exceptional closing days"
    )
    opening_hours: Optional[str] = Field(None, description="Opening hours")


class Search(BaseModel):
    request_id: Optional[str] = Field(None, description="Request id (for stats purposes)")


class TeamMember(BaseModel):
    name: Optional[str] = Field(None, description="Name")
    category: Optional[str] = Field(None, description="Category")
    photo_url: Optional[str] = Field(None, description="Url of the photo")
    merchant_url: Optional[str] = Field(None, description="Merchant url")


class Type2(Enum):
    RESERVER = "RESERVER"
    RESERVER_INTERNE = "RESERVER_INTERNE"
    COMMANDER = "COMMANDER"
    COMMANDER_CHRONO = "COMMANDER_CHRONO"
    PRENDRE_RDV_EXTERNE = "PRENDRE_RDV_EXTERNE"
    PRENDRE_RDV_INTERNE = "PRENDRE_RDV_INTERNE"


class TransactionalLink(BaseModel):
    type: Optional[Type2] = Field(None, description="Type of transactional link")
    url: Optional[str] = Field(None, description="URL of the transactional link")
    next_free_slot: Optional[str] = Field(None, description="Next free slot for an appointment")


class Transport(BaseModel):
    type: Optional[str] = Field(None, description="Type")
    lines: Optional[List[str]] = Field(None, description="Lines")


class Urls(BaseModel):
    merchant_url: Optional[str] = Field(
        None, description="Link to the merchant page on PagesJaunes.fr"
    )
    reviews_url: Optional[str] = Field(
        None, description="Link to the business reviews on PagesJaunes.fr"
    )
    map_url: Optional[str] = Field(None, description="Link to the map URL on PagesJaunes.fr")
    immersive_url: Optional[str] = Field(
        None, description="Link to the immersive view on PagesJaunes.fr"
    )
    itinerary_url: Optional[str] = Field(
        None, description="Link to the detailed route to that place.fr"
    )


class Video(BaseModel):
    url: Optional[str] = Field(None, description="URL of the video")


class WebsiteUrl(BaseModel):
    website_url: Optional[str] = Field(None, description="URL of merchant website")
    url_type: Optional[str] = Field(None, description="URL type of merchant website")
    suggested_label: Optional[str] = Field(None, description="Suggested label of merchant website")


class StatusContent(BaseModel):
    code: Optional[str] = None
    message: Optional[str] = None


class CompanyDetails(BaseModel):
    siren: Optional[str] = Field(None, description="Siren number")
    head_office_address: Optional[HeadOfficeAddress] = Field(
        None, description="Head office address"
    )
    legal_form: Optional[str] = Field(None, description="Legal form")
    creation_date: Optional[str] = Field(None, description="Creation date")
    social_capital: Optional[str] = Field(None, description="Social capital")
    numbers_of_employees: Optional[str] = Field(None, description="Numbers of employees")
    intracommunity_vat: Optional[str] = Field(None, description="Intracommunity vat")
    number_of_businesses: Optional[int] = Field(None, description="Number of businesses")
    main_officer: Optional[List[MainOfficer]] = Field(None, description="Main officers")
    associated_names: Optional[List[str]] = Field(None, description="Associated names")


class Context(BaseModel):
    search: Optional[Search] = Field(None, description="Search parameter context object")
    results: Optional[Results] = Field(None, description="Results object")


class EcoResponsibility(BaseModel):
    labels: Optional[List[Label]] = Field(None, description="Array of labels")
    commitments: Optional[List[Commitment]] = Field(None, description="Array of commitments")
    charter_website_url: Optional[str] = Field(None, description="URL of the charter website")


class Healthcare(BaseModel):
    government_regulation_type: Optional[str] = Field(
        None, description="Government regulation type"
    )
    access_to_care_contract: Optional[bool] = Field(
        None,
        description="Access to Care Contract concluded between health insurance providers and doctors practising in sector.",
    )
    education: Optional[List[str]] = Field(None, description="List of qualifications and training")
    spoken_languages: Optional[List[str]] = Field(None, description="List of spoken languages")
    consultation_fees: Optional[ConsultationFees] = Field(
        None, description="Consultion fees object"
    )
    specialisms: Optional[List[str]] = Field(None, description="List of specialisms")
    practical_informations: Optional[PracticalInformations] = Field(
        None, description="Practical informations"
    )
    team: Optional[List[TeamMember]] = Field(None, description="Array of team members")


class Inscription(BaseModel):
    label: Optional[str] = Field(None, description="Name of one business subscription")
    address_street: Optional[str] = Field(
        None, description="Number and street of business location"
    )
    address_zipcode: Optional[str] = Field(None, description="Zip code of business location")
    address_city: Optional[str] = Field(None, description="City of business location")
    address_district: Optional[str] = Field(None, description="District of business location")
    address_postal_box: Optional[str] = Field(None, description="Postal box of business location")
    reviews: Optional[Reviews] = Field(None, description="Review object")
    contact_infos: Optional[List[ContactInfo]] = Field(
        None, description="Array of contact information"
    )
    urls: Optional[Urls] = Field(None, description="Wraps the set of urls for this business")


class NearbyStation(BaseModel):
    name: Optional[str] = Field(None, description="Name of the nearby station")
    distance: Optional[Distance] = Field(None, description="Distance")
    transports: Optional[List[Transport]] = Field(None, description="Array of transports")


class Status(BaseModel):
    status_content: Optional[List[StatusContent]] = None


class B2b(BaseModel):
    key_figures: Optional[KeyFigures] = Field(None, description="Key figures of the company")
    company_details: Optional[CompanyDetails] = Field(None, description="Company details")
    business_details: Optional[BusinessDetails] = Field(None, description="Business details")


class Response(BaseModel):
    context: Optional[Context] = Field(
        None, description="Object containing the context data for this query"
    )
    listing_id: Optional[str] = Field(None, description="Id of the bloc of the professional")
    merchant_id: Optional[str] = Field(None, description="Id of the professional")
    merchant_name: Optional[str] = Field(None, description="Name of the professional")
    thumbnail_url: Optional[str] = Field(None, description="URL of the professional ’s thumbnail")
    description: Optional[str] = Field(None, description="The professional ’s description")
    website_urls: Optional[List[WebsiteUrl]] = Field(
        None, description="Array of merchant websites URLs"
    )
    business_descriptions: Optional[List[BusinessDescription]] = Field(
        None, description="Array of business description object"
    )
    business_website: Optional[BusinessWebsite] = Field(None, description="Business website object")
    videos: Optional[List[Video]] = Field(None, description="Array of videos")
    photos: Optional[List[Photo]] = Field(None, description="Array of photos")
    legal_notices: Optional[List[LegalNotice]] = Field(None, description="Array of legal notices")
    categories: Optional[List[Category]] = Field(None, description="Array of categories")
    restaurant_info: Optional[RestaurantInfo] = Field(None, description="Restaurant information")
    accommodation_infos: Optional[List[AccommodationInfo]] = Field(
        None, description="Array of accommodation information"
    )
    schedules: Optional[Schedules] = Field(
        None,
        description="Schedules object (see http://wiki.openstreetmap.org/wiki/Key:opening_hours/specification to calculate current status)",
    )
    payment_types: Optional[List[PaymentType]] = Field(None, description="Array of payment types")
    transactionals_links: Optional[List[TransactionalLink]] = Field(
        None, description="Array of transactionals links"
    )
    inscriptions: Optional[List[Inscription]] = Field(
        None, description="Array of all subscriptions (contact info and address) for a business"
    )
    current_status: Optional[CurrentStatus] = Field(None, description="Current status")
    nearby_stations: Optional[List[NearbyStation]] = Field(
        None, description="Array of nearby stations"
    )
    b2b: Optional[B2b] = Field(None, description="Legal and financial informations")
    products: Optional[List[Product]] = Field(None, description="Array of products")
    healthcare: Optional[Healthcare] = Field(None, description="Healthcare informations")
    eco_responsibility: Optional[EcoResponsibility] = Field(
        None, description="Eco responsability informations"
    )


class Exception(BaseModel):
    status: Optional[Status] = None
    class_: Optional[str] = Field(None, alias="class")
    stack: Optional[str] = None
