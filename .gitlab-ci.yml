stages:
  - build
  - configure
  - development
  - prelive
  - validation
  - production

.idunn:
  variables:
    COMPONENT_NAME: idunn

.argocd:
  image:
    name: registry.qwant.ninja/docker/kubectl:1.19.1
  before_script:
    - source ci/bootstrap-k8s.sh
  variables:
    ARGOAPP_REPO_BRANCH: "master"
    ARGOAPP_REPO_PATH: "c2/${KUBE_NAMESPACE}/charts/idunn"
    ARGOCD_APP_ENVIRONMENT: "$CI_ENVIRONMENT_NAME"
    ARGOCD_OPTS: --insecure
    ARGOCD_PROJECT: maps
    ARGOCD_SERVER: $ARGOCD_SERVER_DEV
    ARGOCD_SUBCHART_NAME: webapp
    ARGOCD_TIMEOUT: 600
    ARGOCD_BASE_DOMAIN: c2.par1.kube.qwant.ninja
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_STRATEGY: clone
    MATTERMOST_URL: "https://slack.qwant.ninja"
    ARGOCD_AUTH_TOKEN: $ARGOCD_AUTH_TOKEN_DEVELOPMENT
    ARGOAPP_REPO_URL_SSH: "git@git.qwant.ninja:teams/search-apps/argo_apps.git"
    ARGOCD_KUBE_REPO_URL_HTTPS: https://git.qwant.ninja/teams/search-apps/argo_apps.git
  interruptible: false
  script:
    - deploy_argo
  tags:
    - k8s

.argocd:review:
  stage: development
  variables:
    KUBE_NAMESPACE: "dev-maps"
    ARGOCD_APP_NAME: "review-${COMPONENT_NAME}-${CI_COMMIT_REF_SLUG}"
    FULLNAME_OVERRIDE: "${COMPONENT_NAME}-${CI_COMMIT_REF_SLUG}"
    HELM_VALUES: "values.yaml"
    PRODUCTION: "false"
  except:
    - master

.argocd:prelive:
  stage: prelive
  variables:
    KUBE_NAMESPACE: "int-maps"
    ARGOCD_APP_NAME: "integration-${COMPONENT_NAME}"
    FULLNAME_OVERRIDE: "${COMPONENT_NAME}"
    HELM_VALUES: "values.yaml"
    PRODUCTION: "true"
  when: manual
  except:
    - master

.argocd:production:
  stage: production
  variables:
    ARGOCD_AUTH_TOKEN: $ARGOCD_AUTH_TOKEN_PRODUCTION
    ARGOCD_SERVER: $ARGOCD_SERVER_PROD
    ARGOAPP_REPO_PATH: "c4/${KUBE_NAMESPACE}/charts/idunn"
    ARGOCD_BASE_DOMAIN: c4.par1.kube.qwant.ninja
    KUBE_NAMESPACE: "prod-maps"
    ARGOCD_APP_NAME: "production-$COMPONENT_NAME"
    HELM_VALUES: "values.yaml"
    PRODUCTION: "true"
  when: manual

.argocd:destroy:
  script:
    - echo Destroying review app $ARGOCD_APP_NAME ...
    - argocd app delete $ARGOCD_APP_NAME
      --auth-token $ARGOCD_AUTH_TOKEN
      --server $ARGOCD_SERVER
      --grpc-web
  except:
    refs:
      - master

.promote:integration:
  extends: .build
  stage: validation
  variables:
    DOCKER_CONFIG: "$CI_PROJECT_DIR/.docker"
    GIT_SUBMODULE_STRATEGY: recursive
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/${COMPONENT_NAME}:master"
    SOURCE_IMAGE: "${CI_REGISTRY_IMAGE}/${COMPONENT_NAME}:${CI_COMMIT_REF_SLUG}"
  script:
    - docker pull "$SOURCE_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
    - docker push "$TARGET_IMAGE"
    - subst -i ci/templates/docker-idunn-digest.env
  when: manual

push docker-service-network image:
  stage: build
  tags:
    - light
  script:
    - docker pull "$SOURCE_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$DEST_IMAGE"
    - docker push "$DEST_IMAGE"
  variables:
    SOURCE_IMAGE: "${CI_REGISTRY}/continuous-integration/docker-service-network:3a735904"
    DEST_IMAGE: "${CI_REGISTRY_IMAGE}/ci/docker-service-network:latest"
  when: manual

.build:
  stage: build
  before_script:
    - source ci/bootstrap.sh
    - docker login
      --username "$CI_REGISTRY_USER"
      --password-stdin "$CI_REGISTRY" <<< "$CI_REGISTRY_PASSWORD"
  variables:
    COMPOSE_DOCKER_CLI_BUILD: "1"
    COMPOSE_FILE: "docker-compose.build.yml"
    COMPOSE_PROJECT_NAME: "$CI_PROJECT_PATH_SLUG-j$CI_JOB_ID"
    DOCKER_BUILDKIT: "1"
    DOCKER_CONFIG: "$CI_PROJECT_DIR/.docker"
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - edge
    - shell

build:
  extends:
    - .build
  tags:
    - light
  script:
    - export REDIS_IMAGE_TAG="$(echo $CI_COMMIT_REF_SLUG | sed 's/master/latest/g')"
    - docker-compose build --pull
    - docker-compose push
    - subst < ci/templates/docker-content-digest.env | tee docker-content-digest.env
  variables:
    IDUNN_IMAGE_TAG: "latest"
  artifacts:
    paths:
      - docker-content-digest.env
      - ci/bootstrap.sh
      - ci/bin/docker-stack-wait
      - ci/bin/docker-service-network
      - ci/development/docker-compose.yml
      - ci/prelive/docker-compose.yml
      - ci/production/docker-compose.yml
      - docker-compose.yml

build classifier:
  extends:
    - .build
  variables:
    TARGET_IMAGE: &target-nlu-image "$CI_REGISTRY_IMAGE/classifier/maps:1.1"
    SOURCE_IMAGE: "$CI_REGISTRY/product/nlp/katanoisi/maps:latest"
  script:
    - docker pull "$SOURCE_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
    - docker push "$TARGET_IMAGE"

build idunn:
  extends:
    - .build
  variables:
    TARGET_IMAGE: "$CI_REGISTRY_IMAGE/idunn:dev-latest"
    TARGET_IMAGE_BRANCH: "$CI_REGISTRY_IMAGE/idunn:${CI_COMMIT_REF_SLUG}"
    SOURCE_IMAGE: "qwantresearch/idunn:QMAPS-2459"
  script:
    - docker pull "$SOURCE_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
    - docker push "$TARGET_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE_BRANCH"
    - docker push "$TARGET_IMAGE_BRANCH"
    - subst -i ci/templates/docker-idunn-dev-digest.env
  artifacts:
    paths:
      - "ci"

configure:
  stage: configure
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    TARGET_NLU_IMAGE: *target-nlu-image
  before_script:
    - source ci/bootstrap.sh
  script:
    - configure-values ci/values/
  artifacts:
    paths:
      - ci/
      - docker-compose.yml
      - docker-content-digest.env
  dependencies:
    - build
  tags:
    - light

argo deploy idunn review:
  extends:
    - .idunn
    - .argocd
    - .argocd:review
  environment:
    name: "review/$CI_COMMIT_REF_NAME/$COMPONENT_NAME"
    auto_stop_in: 5 days
    on_stop: stop idunn review
  needs:
    - build idunn
  script:
    - export $(xargs <ci/templates/docker-idunn-dev-digest.env)
    - export IMAGE_DIGEST="$IDUNN_DEV_IMAGE_DIGEST"
    - deploy_argo
  when: on_success

stop idunn review:
  extends:
    - .idunn
    - .argocd
    - .argocd:review
    - .argocd:destroy
  image: registry.qwant.ninja/docker/kubectl:1.19.1
  environment:
    name: "review/$CI_COMMIT_REF_NAME/$COMPONENT_NAME"
    action: stop
  when: manual

argo deploy idunn prelive:
  extends:
    - .idunn
    - .argocd
    - .argocd:prelive
  needs:
    - build idunn
  script:
    - export $(xargs <ci/templates/docker-idunn-dev-digest.env)
    - export IMAGE_DIGEST="$IDUNN_DEV_IMAGE_DIGEST"
    - ci/bootstrap/bin/sync-version-argocd
      --docker-image-app "${CI_REGISTRY_IMAGE}/idunn@${IMAGE_DIGEST}"
      --image-version-object-path-app ".webapp.image.name"
    - deploy_argo
  when: manual
  variables:
    IMAGE_VERSION_FILE: "$HELM_VALUES"
    ARGOAPP_REPO_BASEDIR: "$ARGOAPP_REPO_PATH"

idunn promote integration to prod:
  extends:
    - .promote:integration
    - .idunn
  stage: validation
  artifacts:
    paths:
      - ci/
  except:
    - master

.deploy:
  image: registry.qwant.ninja/docker/dood:18.09
  before_script:
    - source ci/bootstrap.sh
    - docker login 
      --username "$CI_DEPLOY_USER" 
      --password-stdin "$CI_REGISTRY" <<< "$CI_DEPLOY_PASSWORD"
  dependencies:
    - configure
  tags:
    - light-docker
  variables:
    COMPOSE_FILE: "docker-compose.yml:ci/${CI_JOB_STAGE}/docker-compose.yml"
    COMPOSE_PROJECT_NAME: "$CI_PROJECT_PATH_SLUG-j$CI_JOB_ID"
    DOCKER_HOST: "tcp://10.100.31.132:2375"
    GIT_STRATEGY: none
    PROMETHEUS_SERVICE_NAME: "1120_prometheus"
    ROUTER_SERVICE_NAME: "product-maps-traefik_traefik"
    STACK_NAME: "$CI_PROJECT_ID"
  when: manual

.deploy-kube:
  image: registry.qwant.ninja/docker/kubectl:master
  tags:
    - light-docker
  before_script:
    - source ci/bootstrap.sh
    - helm registry login
      --username "$CI_REGISTRY_USER"
      --password-stdin "$CI_REGISTRY" <<< "$CI_REGISTRY_PASSWORD"
  script:
    - kubeconfig
    - helm chart pull "$HELM_CHART_REF"
    - helm chart export "$HELM_CHART_REF" -d ci/
    - helm-deploy
  variables:
    HELM_EXPERIMENTAL_OCI: 1
    HELM_VALUE_FILES: "ci/values/$COMPONENT_NAME/common.yaml:ci/values/$COMPONENT_NAME/$CI_JOB_STAGE.yaml"
    # https://git.qwant.ninja/helm/text-classifier/-/commit/1f3bc2514052476e008bf1c8c9e5bb7f5b81c125
    HELM_CHART_REF: "$CI_REGISTRY/helm/text-classifier@sha256:b57cd48a1a9e9443a697320b38b4e3694fd345bdbc94ad2f126690bd32ad6d85"
    COMPONENT_NAME: classifier
    HELM_RELEASE: "classifier"
    HELM_CHART: "ci/text-classifier"
  resource_group: $CI_PROJECT_ID:$CI_ENVIRONMENT_SLUG
  when: manual

deploy development:
  extends: .deploy
  stage: development
  environment:
    name: "development/idunn"
    url: "http://maps.dev.qwant.ninja/maps"
  script:
    - deploy
  variables:
    KUZZLE_SERVICE_NAME: "1216_kuzzle"
    NLU_SERVICE_NAME: "1701_nlu"

deploy classifier development:
  extends: .deploy-kube
  stage: development
  environment:
    name: "development/classifier"
  variables:
    KUBE_ENV: development

deploy prelive:
  extends: "deploy development"
  stage: prelive
  environment:
    name: "prelive/idunn"
    url: "https://www.qwant.plive/maps"
  variables:
    DOCKER_HOST: "tcp://10.103.9.1:2375"

deploy classifier prelive:
  extends: .deploy-kube
  stage: prelive
  environment:
    name: "prelive/classifier"
  variables:
    KUBE_ENV: integration

deploy production:
  extends: "deploy prelive"
  stage: production
  script:
    - echo "10.100.56.249 manager.maps.qwant.infra" > /etc/hosts
    - deploy
  environment:
    name: production
    url: "https://www.qwant.com/maps"
  variables:
    DOCKER_HOST: "tcp://manager.maps.qwant.infra:2376"
    DOCKER_TLS_VERIFY: "1"
    ROUTER_SERVICE_NAME: "product-maps-production_traefik"

deploy classifier production:
  extends: .deploy-kube
  stage: production
  environment:
    name: "production/classifier"
  variables:
    KUBE_ENV: production

argo deploy idunn production:
  extends:
    - .idunn
    - .argocd
    - .argocd:production
  needs:
    - idunn promote integration to prod
  script:
    - export $(xargs <ci/templates/docker-idunn-digest.env)
    - export IMAGE_DIGEST="$IDUNN_PROD_IMAGE_DIGEST"
    - ci/bootstrap/bin/sync-version-argocd
      --docker-image-app "${CI_REGISTRY_IMAGE}/idunn@${IMAGE_DIGEST}"
      --image-version-object-path-app ".webapp.image.name"
    - deploy_argo
  variables:
    IMAGE_VERSION_FILE: "$HELM_VALUES"
    ARGOAPP_REPO_BASEDIR: "$ARGOAPP_REPO_PATH"
