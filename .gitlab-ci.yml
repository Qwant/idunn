stages:
  - build
  - configure
  - development
  - prelive
  - validation
  - production

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'

.idunn:
  variables:
    COMPONENT_NAME: idunn

.argocd:
  image:
    name: registry.qwant.ninja/docker/kubectl:1.19.1
  before_script:
    - source ci/bootstrap-k8s.sh
  variables:
    ARGOAPP_REPO_BRANCH: "master"
    ARGOAPP_REPO_PATH: "c2/${KUBE_NAMESPACE}/charts/idunn"
    ARGOCD_APP_ENVIRONMENT: "$CI_ENVIRONMENT_NAME"
    ARGOCD_OPTS: --insecure
    ARGOCD_PROJECT: maps
    ARGOCD_SERVER: $ARGOCD_SERVER_DEV
    ARGOCD_SUBCHART_NAME: webapp
    ARGOCD_TIMEOUT: 600
    ARGOCD_BASE_DOMAIN: c2.par1.kube.qwant.ninja
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_STRATEGY: clone
    MATTERMOST_URL: "https://slack.qwant.ninja"
    ARGOCD_AUTH_TOKEN: $ARGOCD_AUTH_TOKEN_DEVELOPMENT
    ARGOAPP_REPO_URL_SSH: "git@git.qwant.ninja:teams/search-apps/argo_apps.git"
    ARGOCD_KUBE_REPO_URL_HTTPS: https://git.qwant.ninja/teams/search-apps/argo_apps.git
  interruptible: false
  tags:
    - k8s

.argocd:review:
  stage: development
  variables:
    KUBE_NAMESPACE: "dev-maps"
    ARGOCD_APP_NAME: "review-${COMPONENT_NAME}-${CI_COMMIT_REF_SLUG}"
    FULLNAME_OVERRIDE: "${COMPONENT_NAME}-${CI_COMMIT_REF_SLUG}"
    HELM_VALUES: "values.yaml,version.yaml"
    PRODUCTION: "false"

.argocd:prelive:
  stage: prelive
  variables:
    KUBE_NAMESPACE: "int-maps"
    ARGOCD_APP_NAME: "integration-${COMPONENT_NAME}"
    FULLNAME_OVERRIDE: "${COMPONENT_NAME}"
    HELM_VALUES: "values.yaml,version.yaml"

.argocd:production:
  stage: production
  variables:
    ARGOCD_AUTH_TOKEN: $ARGOCD_AUTH_TOKEN_PRODUCTION
    ARGOCD_SERVER: $ARGOCD_SERVER_PROD
    ARGOAPP_REPO_PATH: "c4/${KUBE_NAMESPACE}/charts/idunn"
    ARGOCD_BASE_DOMAIN: c4.par1.kube.qwant.ninja
    KUBE_NAMESPACE: "prod-maps"
    ARGOCD_APP_NAME: "production-$COMPONENT_NAME"
    HELM_VALUES: "values.yaml,version.yaml"

.argocd:destroy:
  script:
    - echo Destroying review app $ARGOCD_APP_NAME ...
    - argocd app delete $ARGOCD_APP_NAME
      --auth-token $ARGOCD_AUTH_TOKEN
      --server $ARGOCD_SERVER
      --grpc-web

.release:
  extends: .build
  stage: validation
  variables:
    DOCKER_CONFIG: "$CI_PROJECT_DIR/.docker"
    GIT_SUBMODULE_STRATEGY: recursive
    SOURCE_IMAGE: "${CI_REGISTRY_IMAGE}/${COMPONENT_NAME}:${CI_COMMIT_REF_SLUG}"
  script:
    - export $(xargs <ci/templates/release)
    - docker pull "$SOURCE_IMAGE"
    - if ci/bootstrap/bin/docker-content-digest "qwant" "${CI_REGISTRY_IMAGE}/${COMPONENT_NAME}" "${RELEASE_TAG_REF}"; then
        echo "Released Docker image already exist please update the release tag,....";
        exit 1;
      fi
    - docker tag "$SOURCE_IMAGE" "${CI_REGISTRY_IMAGE}/${COMPONENT_NAME}:${RELEASE_TAG_REF}"
    - docker push "${CI_REGISTRY_IMAGE}/${COMPONENT_NAME}:${RELEASE_TAG_REF}"
    - subst -i ci/templates/docker-idunn-digest.env
  when: manual

.build:
  stage: build
  before_script:
    - source ci/bootstrap.sh
    - docker login
      --username "$CI_REGISTRY_USER"
      --password-stdin "$CI_REGISTRY" <<< "$CI_REGISTRY_PASSWORD"
  variables:
    COMPOSE_DOCKER_CLI_BUILD: "1"
    COMPOSE_FILE: "docker-compose.build.yml"
    COMPOSE_PROJECT_NAME: "$CI_PROJECT_PATH_SLUG-j$CI_JOB_ID"
    DOCKER_BUILDKIT: "1"
    DOCKER_CONFIG: "$CI_PROJECT_DIR/.docker"
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - shell

build classifier:
  extends:
    - .build
  variables:
    TARGET_IMAGE: &target-nlu-image "$CI_REGISTRY_IMAGE/classifier/maps:1.4.2"
    SOURCE_IMAGE: "$CI_REGISTRY/product/nlp/katanoisi/maps:latest"
  script:
    - docker pull "$SOURCE_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
    - docker push "$TARGET_IMAGE"

build idunn:
  extends:
    - .build
  variables:
    TARGET_IMAGE: "$CI_REGISTRY_IMAGE/idunn:dev-latest"
    TARGET_IMAGE_BRANCH: "$CI_REGISTRY_IMAGE/idunn:${CI_COMMIT_REF_SLUG}"
    SOURCE_IMAGE: "qwantresearch/idunn:latest"
  script:
    - docker pull "$SOURCE_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
    - docker push "$TARGET_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE_BRANCH"
    - docker push "$TARGET_IMAGE_BRANCH"

configure:
  stage: configure
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    TARGET_NLU_IMAGE: *target-nlu-image
  before_script:
    - source ci/bootstrap.sh
  script:
    - configure-values ci/values/
    - subst -i ci/templates/docker-idunn-dev-digest.env
  artifacts:
    paths:
      - ci/
      - docker-compose.yml
  tags:
    - shell

argo deploy idunn review:
  extends:
    - .idunn
    - .argocd
    - .argocd:review
  environment:
    name: "review/$CI_COMMIT_REF_NAME/$COMPONENT_NAME"
    auto_stop_in: 5 days
    on_stop: stop idunn review
  needs:
    - configure
  script:
    - export $(xargs <ci/templates/docker-idunn-dev-digest.env)
    - export IMAGE_DIGEST="$IDUNN_DEV_IMAGE_DIGEST"
    - deploy_argoapp_review
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: on_success

stop idunn review:
  extends:
    - .idunn
    - .argocd
    - .argocd:review
    - .argocd:destroy
  image: registry.qwant.ninja/docker/kubectl:1.19.1
  environment:
    name: "review/$CI_COMMIT_REF_NAME/$COMPONENT_NAME"
    action: stop
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual

argo deploy idunn dev:
  extends:
    - .idunn
    - .argocd
    - .argocd:review
  environment:
    name: "review/$CI_COMMIT_REF_NAME/$COMPONENT_NAME"
  needs:
    - configure
  script:
    - export $(xargs <ci/templates/docker-idunn-dev-digest.env)
    - export IMAGE_DIGEST="$IDUNN_DEV_IMAGE_DIGEST"
    - ci/bootstrap/bin/sync-version-argocd
      --docker-image-app "${CI_REGISTRY_IMAGE}/idunn@${IMAGE_DIGEST}"
      --image-version-object-path-app ".webapp.image.name"
    - argocd app sync $ARGOCD_APP_NAME $ARGOCD_OPTS --auth-token $ARGOCD_AUTH_TOKEN  --server $ARGOCD_SERVER
    - argocd app get $ARGOCD_APP_NAME $ARGOCD_OPTS --refresh --auth-token $ARGOCD_AUTH_TOKEN  --server $ARGOCD_SERVER
  variables:
    ARGOCD_APP_NAME: "dev-${COMPONENT_NAME}"
    IMAGE_VERSION_FILE: "version.yaml"
    ARGOAPP_REPO_BASEDIR: "$ARGOAPP_REPO_PATH"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual

argo deploy idunn prelive:
  extends:
    - .idunn
    - .argocd
    - .argocd:prelive
  needs:
    - configure
  script:
    - export $(xargs <ci/templates/docker-idunn-dev-digest.env)
    - export IMAGE_DIGEST="$IDUNN_DEV_IMAGE_DIGEST"
    - ci/bootstrap/bin/sync-version-argocd
      --docker-image-app "${CI_REGISTRY_IMAGE}/idunn@${IMAGE_DIGEST}"
      --image-version-object-path-app ".webapp.image.name"
    - argocd app sync $ARGOCD_APP_NAME $ARGOCD_OPTS --auth-token $ARGOCD_AUTH_TOKEN  --server $ARGOCD_SERVER
    - argocd app get $ARGOCD_APP_NAME $ARGOCD_OPTS --refresh --auth-token $ARGOCD_AUTH_TOKEN  --server $ARGOCD_SERVER
  variables:
    IMAGE_VERSION_FILE: "version.yaml"
    ARGOAPP_REPO_BASEDIR: "$ARGOAPP_REPO_PATH"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual

idunn promote integration to prod:
  extends:
    - .release
    - .idunn
  stage: validation
  artifacts:
    paths:
      - ci/

.deploy-kube:
  image: registry.qwant.ninja/docker/kubectl:master
  tags:
    - docker
  before_script:
    - source ci/bootstrap.sh
    - helm registry login
      --username "$CI_REGISTRY_USER"
      --password-stdin "$CI_REGISTRY" <<< "$CI_REGISTRY_PASSWORD"
  script:
    - kubeconfig
    - helm chart pull "$HELM_CHART_REF"
    - helm chart export "$HELM_CHART_REF" -d ci/
    - helm-deploy
  variables:
    HELM_EXPERIMENTAL_OCI: 1
    HELM_VALUE_FILES: "ci/values/$COMPONENT_NAME/common.yaml:ci/values/$COMPONENT_NAME/$CI_JOB_STAGE.yaml"
    # https://git.qwant.ninja/helm/text-classifier/-/commit/1f3bc2514052476e008bf1c8c9e5bb7f5b81c125
    HELM_CHART_REF: "$CI_REGISTRY/helm/text-classifier@sha256:b57cd48a1a9e9443a697320b38b4e3694fd345bdbc94ad2f126690bd32ad6d85"
    COMPONENT_NAME: classifier
    HELM_RELEASE: "classifier"
    HELM_CHART: "ci/text-classifier"
  resource_group: $CI_PROJECT_ID:$CI_ENVIRONMENT_SLUG
  when: manual

deploy classifier development:
  extends: .deploy-kube
  stage: development
  environment:
    name: "development/classifier"
  variables:
    KUBE_ENV: development

deploy classifier prelive:
  extends: .deploy-kube
  stage: prelive
  environment:
    name: "prelive/classifier"
  variables:
    KUBE_ENV: integration

deploy classifier production:
  extends: .deploy-kube
  stage: production
  environment:
    name: "production/classifier"
  variables:
    KUBE_ENV: production

argo deploy idunn production:
  extends:
    - .idunn
    - .argocd
    - .argocd:production
  needs:
    - idunn promote integration to prod
  script:
    - export $(xargs <ci/templates/release)
    - ci/bootstrap/bin/sync-version-argocd
      --docker-image-app "${CI_REGISTRY_IMAGE}/idunn:${RELEASE_TAG_REF}"
      --image-version-object-path-app ".webapp.image.name"
    - argocd app sync $ARGOCD_APP_NAME $ARGOCD_OPTS --auth-token $ARGOCD_AUTH_TOKEN  --server $ARGOCD_SERVER
    - argocd app get $ARGOCD_APP_NAME $ARGOCD_OPTS --refresh --auth-token $ARGOCD_AUTH_TOKEN  --server $ARGOCD_SERVER
  variables:
    IMAGE_VERSION_FILE: "version.yaml"
    ARGOAPP_REPO_BASEDIR: "$ARGOAPP_REPO_PATH"
